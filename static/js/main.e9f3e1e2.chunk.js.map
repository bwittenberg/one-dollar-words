{"version":3,"sources":["minecraft.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["wordValueLookup","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","getWordValue","word","toLowerCase","reduce","acc","letter","App","useState","cents","setCents","setWord","wordListUrl","setWordListUrl","list","setList","handleUrlForm","preventDefault","stopPropagation","fetchUrl","useCallback","length","fetch","json","Array","isArray","Object","keys","filter","useEffect","console","log","className","src","minecraft","alt","onSubmit","type","value","onChange","target","toFixed","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAAe,G,MAAA,IAA0B,uC,OCUnCA,EAA0C,CAC9CC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,IAGQC,EAAe,SAACC,GAC3B,OAAO,YAAIA,EAAKC,eAAeC,QAC7B,SAACC,EAAaC,GACZ,OAAOD,EAAM/B,EAAgBgC,KAE/B,IAqEWC,MAjEf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAEWF,mBAAS,IAFpB,mBAENN,EAFM,KAEAS,EAFA,OAYyBH,mBAAS,IAZlC,mBAYNI,EAZM,KAYOC,EAZP,OAiBWL,mBAAmB,IAjB9B,mBAiBNM,EAjBM,KAiBAC,EAjBA,KAkBPC,EAAgD,uCAAG,WAAOrC,GAAP,SAAAJ,EAAA,sDACvDI,EAAEsC,iBACFtC,EAAEuC,kBACFC,IAHuD,2CAAH,sDAKhDA,EAAWC,sBAAW,sBAAC,gCAAA7C,EAAA,2DACvBqC,EAAYS,OAAS,GADE,iEAIDC,MAAMV,GAJL,8BAImBW,OAJnB,OAIrBA,EAJqB,OAKrBT,EAAOU,MAAMC,QAAQF,GAAQA,EAAOG,OAAOC,KAAKJ,GAChDK,EAAS,SAAC1B,GAAD,OAAyC,MAAvBD,EAAaC,IAC9Ca,EAAQD,EAAKc,OAAOA,IAPO,4CAQ1B,CAAChB,IAOJ,OANAiB,qBAAU,WACRC,QAAQC,IAAI,CACV,oFACA,mFAED,IAED,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAWF,UAAU,WAAWG,IAAI,SAC9C,+CACA,sBAAMC,SArC8C,SAACzD,GACzDA,EAAEsC,iBACFtC,EAAEuC,kBACFR,EAAST,EAAaC,KAkClB,SACE,uBAAOmC,KAAK,OAAOC,MAAOpC,EAAMqC,SAzCiB,SAAC5D,GACxDgC,EAAQhC,EAAE6D,OAAOF,YA0Cb,mCAAM7B,EAAQ,KAAKgC,QAAQ,GAA3B,UAEF,+BAAK3B,EAAKO,OAAV,yBACA,sBAAMe,SAAUpB,EAAhB,SACE,uBAAOqB,KAAK,OAAOC,MAAO1B,EAAa2B,SArCW,SAAC5D,GACvDkC,EAAelC,EAAE6D,OAAOF,YAsCtB,qBAAKN,UAAU,YAAf,SACGlB,EAAK4B,KAAI,SAACxC,GACT,OACE,qBAAK8B,UAAU,OAAf,SACG9B,GADwBA,YCzFxByC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e9f3e1e2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/minecraft.b1e770c2.svg\";","import React, {\n  ChangeEventHandler,\n  FormEventHandler,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport \"./App.css\";\nimport minecraft from \"./minecraft.svg\";\n\nconst wordValueLookup: Record<string, number> = {\n  a: 1,\n  b: 2,\n  c: 3,\n  d: 4,\n  e: 5,\n  f: 6,\n  g: 7,\n  h: 8,\n  i: 9,\n  j: 10,\n  k: 11,\n  l: 12,\n  m: 13,\n  n: 14,\n  o: 15,\n  p: 16,\n  q: 17,\n  r: 18,\n  s: 19,\n  t: 20,\n  u: 21,\n  v: 22,\n  w: 23,\n  x: 24,\n  y: 25,\n  z: 26,\n};\n\nexport const getWordValue = (word: string) => {\n  return [...word.toLowerCase()].reduce(\n    (acc: number, letter: keyof typeof wordValueLookup) => {\n      return acc + wordValueLookup[letter];\n    },\n    0\n  );\n};\n\nfunction App() {\n  const [cents, setCents] = useState(0);\n  const [word, setWord] = useState(\"\");\n  const updateWord: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setWord(e.target.value);\n  };\n  const calculateValue: FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setCents(getWordValue(word));\n  };\n\n  const [wordListUrl, setWordListUrl] = useState(\"\");\n  const updateUrl: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setWordListUrl(e.target.value);\n  };\n\n  const [list, setList] = useState<string[]>([]);\n  const handleUrlForm: FormEventHandler<HTMLFormElement> = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    fetchUrl();\n  };\n  const fetchUrl = useCallback(async () => {\n    if (wordListUrl.length < 0) {\n      return;\n    }\n    const json = await (await fetch(wordListUrl)).json();\n    const list = Array.isArray(json) ? json : Object.keys(json);\n    const filter = (word: string) => getWordValue(word) === 100;\n    setList(list.filter(filter));\n  }, [wordListUrl]);\n  useEffect(() => {\n    console.log([\n      \"https://raw.githubusercontent.com/dwyl/english-words/master/words_dictionary.json\",\n      \"https://raw.githubusercontent.com/bevacqua/correcthorse/master/wordlist.json\",\n    ]);\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={minecraft} className=\"App-logo\" alt=\"logo\" />\n        <h1>Enter a word!</h1>\n        <form onSubmit={calculateValue}>\n          <input type=\"text\" value={word} onChange={updateWord} />\n        </form>\n        <p>${(cents / 100).toFixed(2)} </p>\n      </header>\n      <h2>{list.length} ðŸ’° Words</h2>\n      <form onSubmit={handleUrlForm}>\n        <input type=\"text\" value={wordListUrl} onChange={updateUrl} />\n      </form>\n      <div className=\"word-list\">\n        {list.map((word) => {\n          return (\n            <div className=\"word\" key={word}>\n              {word}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}